# Generated by Django 5.0.2 on 2025-09-22 04:00

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='DataRetentionPolicy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('policy_type', models.CharField(choices=[('standup_sessions', 'Standup Sessions'), ('voice_recordings', 'Voice Recordings'), ('analytics_data', 'Analytics Data'), ('chat_history', 'Chat History'), ('error_logs', 'Error Logs'), ('audit_trails', 'Audit Trails')], max_length=30, unique=True)),
                ('retention_days', models.IntegerField(default=365)),
                ('auto_cleanup_enabled', models.BooleanField(default=True)),
                ('anonymise_before_deletion', models.BooleanField(default=False)),
                ('last_cleanup_run', models.DateTimeField(blank=True, null=True)),
                ('next_cleanup_due', models.DateTimeField(blank=True, null=True)),
                ('cleanup_frequency_days', models.IntegerField(default=7)),
                ('legal_hold_exemption', models.BooleanField(default=False)),
                ('compliance_notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Data Retention Policy',
                'verbose_name_plural': 'Data Retention Policies',
                'db_table': 'dashboard_data_retention_policy',
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True)),
                ('description', models.TextField(blank=True)),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('archived', 'Archived')], default='active', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Project',
                'verbose_name_plural': 'Projects',
                'db_table': 'dashboard_project',
            },
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='StandupSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('yesterday_work', models.TextField(blank=True, default='')),
                ('today_plan', models.TextField(blank=True, default='')),
                ('blockers', models.TextField(blank=True, default='')),
                ('sentiment_score', models.FloatField(blank=True, null=True)),
                ('sentiment_label', models.CharField(blank=True, default='', max_length=20)),
                ('transcription_text', models.TextField(blank=True, default='')),
                ('summary_text', models.TextField(blank=True, default='')),
                ('ai_summary', models.TextField(blank=True, default='')),
                ('pipeline_completed', models.BooleanField(default=False)),
                ('pipeline_completed_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='standup_sessions', to='dashboard.project')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='standup_sessions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Standup Session',
                'verbose_name_plural': 'Standup Sessions',
                'db_table': 'dashboard_standup_session',
            },
        ),
        migrations.CreateModel(
            name='Blocker',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('category', models.CharField(choices=[('technical', 'Technical'), ('dependencies', 'Dependencies'), ('resources', 'Resources'), ('communication', 'Communication'), ('other', 'Other')], default='technical', max_length=20)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], default='medium', max_length=10)),
                ('status', models.CharField(choices=[('active', 'Active'), ('resolved', 'Resolved'), ('cancelled', 'Cancelled')], default='active', max_length=10)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('resolution_notes', models.TextField(blank=True)),
                ('ai_category_confidence', models.FloatField(blank=True, null=True)),
                ('ai_suggested_actions', models.JSONField(blank=True, default=list)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('resolved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resolved_blockers', to=settings.AUTH_USER_MODEL)),
                ('standup_session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='individual_blockers', to='dashboard.standupsession')),
            ],
            options={
                'verbose_name': 'Blocker',
                'verbose_name_plural': 'Blockers',
                'db_table': 'dashboard_blocker',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TeamMember',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('developer', 'Developer'), ('manager', 'Manager')], max_length=20)),
                ('is_active', models.BooleanField(default=True)),
                ('joined_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='team_members', to='dashboard.project')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='team_member', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Team Member',
                'verbose_name_plural': 'Team Members',
                'db_table': 'dashboard_team_member',
            },
        ),
        migrations.CreateModel(
            name='TeamHealthAlert',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('alert_type', models.CharField(choices=[('sentiment_decline', 'Sentiment Decline'), ('engagement_drop', 'Engagement Drop'), ('blocker_increase', 'Blocker Increase'), ('productivity_concern', 'Productivity Concern'), ('team_member_burnout', 'Team Member Burnout'), ('communication_gap', 'Communication Gap')], max_length=50)),
                ('severity', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], default='medium', max_length=20)),
                ('status', models.CharField(choices=[('active', 'Active'), ('acknowledged', 'Acknowledged'), ('resolved', 'Resolved'), ('dismissed', 'Dismissed')], default='active', max_length=20)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('context_data', models.JSONField(default=dict, help_text='Additional context and metrics')),
                ('confidence_score', models.FloatField(help_text='AI confidence in this alert (0.0 - 1.0)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('acknowledged_at', models.DateTimeField(blank=True, null=True)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('acknowledged_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='acknowledged_alerts', to=settings.AUTH_USER_MODEL)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='health_alerts', to='dashboard.project')),
                ('resolved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resolved_alerts', to=settings.AUTH_USER_MODEL)),
                ('team_member', models.ForeignKey(blank=True, help_text='Specific team member if alert is individual-focused', null=True, on_delete=django.db.models.deletion.CASCADE, to='dashboard.teammember')),
            ],
            options={
                'verbose_name': 'Team Health Alert',
                'verbose_name_plural': 'Team Health Alerts',
                'db_table': 'dashboard_team_health_alert',
                'ordering': ['-created_at', '-severity'],
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('developer', 'Developer'), ('manager', 'Manager')], default='developer', max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('team', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='dashboard.team')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Profile',
                'verbose_name_plural': 'User Profiles',
                'db_table': 'dashboard_user_profile',
            },
        ),
        migrations.CreateModel(
            name='WorkItemReference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('item_type', models.CharField(choices=[('github_pr', 'GitHub Pull Request'), ('github_issue', 'GitHub Issue'), ('jira_ticket', 'Jira Ticket'), ('branch', 'Git Branch')], max_length=20)),
                ('item_id', models.CharField(max_length=100)),
                ('item_url', models.URLField(blank=True)),
                ('title', models.CharField(blank=True, max_length=500)),
                ('status', models.CharField(choices=[('active', 'Active'), ('completed', 'Completed'), ('blocked', 'Blocked'), ('cancelled', 'Cancelled')], default='active', max_length=20)),
                ('external_data', models.JSONField(blank=True, default=dict)),
                ('last_synced', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('standup_session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='work_item_refs', to='dashboard.standupsession')),
            ],
            options={
                'verbose_name': 'Work Item Reference',
                'verbose_name_plural': 'Work Item References',
                'db_table': 'dashboard_work_item_reference',
                'unique_together': {('standup_session', 'item_type', 'item_id')},
            },
        ),
        migrations.AddField(
            model_name='standupsession',
            name='work_items',
            field=models.ManyToManyField(blank=True, related_name='standup_sessions', to='dashboard.workitemreference'),
        ),
        migrations.CreateModel(
            name='DashboardMetrics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('metric_type', models.CharField(choices=[('standup_completion', 'Standup Completion Rate'), ('sentiment_average', 'Average Sentiment'), ('productivity_score', 'Productivity Score'), ('team_health', 'Team Health Score'), ('issue_resolution_time', 'Issue Resolution Time'), ('ai_processing_success', 'AI Processing Success Rate')], max_length=50)),
                ('value', models.FloatField()),
                ('date', models.DateField()),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dashboard_metrics', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'dashboard_metrics',
                'ordering': ['-date', '-created_at'],
                'unique_together': {('user', 'metric_type', 'date')},
            },
        ),
        migrations.CreateModel(
            name='StandupAnalytics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('total_participants', models.IntegerField(default=0)),
                ('active_participants', models.IntegerField(default=0)),
                ('average_sentiment', models.FloatField(blank=True, null=True)),
                ('total_blockers', models.IntegerField(default=0)),
                ('resolved_blockers', models.IntegerField(default=0)),
                ('average_session_duration', models.FloatField(blank=True, null=True)),
                ('common_themes', models.JSONField(blank=True, default=dict)),
                ('risk_indicators', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='analytics', to='dashboard.project')),
            ],
            options={
                'verbose_name': 'Standup Analytics',
                'verbose_name_plural': 'Standup Analytics',
                'db_table': 'dashboard_standup_analytics',
                'unique_together': {('project', 'date')},
            },
        ),
        migrations.CreateModel(
            name='TeamHealthTrend',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('metric_type', models.CharField(choices=[('participation', 'Participation Rate'), ('sentiment', 'Average Sentiment'), ('blockers', 'Blocker Resolution Rate'), ('work_items', 'Work Item Progress')], max_length=20)),
                ('date', models.DateField()),
                ('current_value', models.FloatField()),
                ('previous_value', models.FloatField(blank=True, null=True)),
                ('change_percentage', models.FloatField(blank=True, null=True)),
                ('trend_direction', models.CharField(choices=[('improving', 'Improving'), ('stable', 'Stable'), ('declining', 'Declining'), ('volatile', 'Volatile')], max_length=20)),
                ('rolling_average_7d', models.FloatField(blank=True, null=True)),
                ('rolling_average_30d', models.FloatField(blank=True, null=True)),
                ('standard_deviation', models.FloatField(blank=True, null=True)),
                ('confidence_score', models.FloatField(blank=True, null=True)),
                ('predicted_next_value', models.FloatField(blank=True, null=True)),
                ('anomaly_detected', models.BooleanField(default=False)),
                ('alert_threshold_breached', models.BooleanField(default=False)),
                ('contributing_factors', models.JSONField(blank=True, default=dict)),
                ('recommended_actions', models.JSONField(blank=True, default=list)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='health_trends', to='dashboard.project')),
            ],
            options={
                'verbose_name': 'Team Health Trend',
                'verbose_name_plural': 'Team Health Trends',
                'db_table': 'dashboard_team_health_trend',
                'indexes': [models.Index(fields=['project', 'metric_type', 'date'], name='dashboard_t_project_5a4e14_idx'), models.Index(fields=['trend_direction', 'anomaly_detected'], name='dashboard_t_trend_d_5259cb_idx')],
                'unique_together': {('project', 'metric_type', 'date')},
            },
        ),
        migrations.CreateModel(
            name='TeamMetrics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('metric_type', models.CharField(choices=[('team_velocity', 'Team Velocity'), ('collaboration_score', 'Collaboration Score'), ('communication_frequency', 'Communication Frequency'), ('productivity_trend', 'Productivity Trend'), ('satisfaction_score', 'Team Satisfaction')], max_length=50)),
                ('value', models.FloatField()),
                ('date', models.DateField()),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='team_metrics', to='dashboard.team')),
            ],
            options={
                'db_table': 'dashboard_team_metrics',
                'ordering': ['-date', '-created_at'],
                'unique_together': {('team', 'metric_type', 'date')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='standupsession',
            unique_together={('user', 'date', 'project')},
        ),
    ]
